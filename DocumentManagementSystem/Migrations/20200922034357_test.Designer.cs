// <auto-generated />
using System;
using DocumentManagementSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DocumentManagementSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200922034357_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DocumentManagementSystem.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.AccessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("AccessType");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.ApprovalProgressStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("ApprovalProgressStatus");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.ApprovalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("ApprovalStatus");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.AuditAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName");

                    b.HasKey("Id");

                    b.ToTable("AuditAction");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.AuditTrail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDate");

                    b.Property<int>("ActionId");

                    b.Property<string>("AffectedWebPage");

                    b.Property<string>("Ipaddress");

                    b.Property<string>("Remark");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrail");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApprovalStatusId");

                    b.Property<string>("ApprovedBy");

                    b.Property<string>("ApprovedByNavigationId");

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<DateTime?>("CancelDate");

                    b.Property<string>("CancelReason");

                    b.Property<string>("CanceledBy");

                    b.Property<string>("CanceledByNavigationId");

                    b.Property<string>("Description");

                    b.Property<string>("DocumentCode");

                    b.Property<string>("DocumentName");

                    b.Property<int?>("DocumentTypeId");

                    b.Property<bool?>("IsCanceled");

                    b.Property<bool?>("IsFinalApprovalObtained");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<long?>("OrganizationId");

                    b.Property<string>("RequestBy");

                    b.Property<string>("RequestByNavigationId");

                    b.Property<DateTime?>("RequestDate");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("ApprovedByNavigationId");

                    b.HasIndex("CanceledByNavigationId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RequestByNavigationId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.DocumentAccessRight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessTypeId");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("CreatedByNavigationId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<long?>("DocumentId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("RoleId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AccessTypeId");

                    b.HasIndex("CreatedByNavigationId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentAccessRight");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.DocumentSearchType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("DocumentSearchType");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ErrorDate");

                    b.Property<string>("ErrorMessage");

                    b.Property<string>("ErrorSource");

                    b.Property<string>("ErrorStackTrace");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.GrantedApproval", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<int?>("ApprovalProgressId");

                    b.Property<string>("Comment");

                    b.Property<long?>("DocumentRequestId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalProgressId");

                    b.HasIndex("DocumentRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("GrantedApproval");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.NewDocumentRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApprovalStatusId");

                    b.Property<DateTime?>("CancelDate");

                    b.Property<string>("CancelReason");

                    b.Property<string>("CanceledBy");

                    b.Property<string>("CanceledByNavigationId");

                    b.Property<string>("Description");

                    b.Property<string>("DocumentName");

                    b.Property<int?>("DocumentTypeId");

                    b.Property<bool?>("IsCanceled");

                    b.Property<bool?>("IsFinalApprovalObtained");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<long?>("OrganizationId");

                    b.Property<string>("RequestBy");

                    b.Property<string>("RequestByNavigationId");

                    b.Property<DateTime?>("RequestDate");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("CanceledByNavigationId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RequestByNavigationId");

                    b.ToTable("NewDocumentRequest");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Organization1");

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("CreatedByNavigationId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("MobileNumber")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatedByNavigationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.AuditTrail", b =>
                {
                    b.HasOne("DocumentManagementSystem.Models.AuditAction", "Action")
                        .WithMany("AuditTrail")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.Document", b =>
                {
                    b.HasOne("DocumentManagementSystem.Models.ApprovalStatus", "ApprovalStatus")
                        .WithMany("Document")
                        .HasForeignKey("ApprovalStatusId");

                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser", "ApprovedByNavigation")
                        .WithMany()
                        .HasForeignKey("ApprovedByNavigationId");

                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser", "CanceledByNavigation")
                        .WithMany()
                        .HasForeignKey("CanceledByNavigationId");

                    b.HasOne("DocumentManagementSystem.Models.DocumentType", "DocumentType")
                        .WithMany("Document")
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("DocumentManagementSystem.Models.Organization", "Organization")
                        .WithMany("Document")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser", "RequestByNavigation")
                        .WithMany()
                        .HasForeignKey("RequestByNavigationId");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.DocumentAccessRight", b =>
                {
                    b.HasOne("DocumentManagementSystem.Models.AccessType", "AccessType")
                        .WithMany("DocumentAccessRight")
                        .HasForeignKey("AccessTypeId");

                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser", "CreatedByNavigation")
                        .WithMany()
                        .HasForeignKey("CreatedByNavigationId");

                    b.HasOne("DocumentManagementSystem.Models.Document", "Document")
                        .WithMany("DocumentAccessRight")
                        .HasForeignKey("DocumentId");

                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.ErrorLog", b =>
                {
                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.GrantedApproval", b =>
                {
                    b.HasOne("DocumentManagementSystem.Models.ApprovalProgressStatus", "ApprovalProgress")
                        .WithMany("GrantedApproval")
                        .HasForeignKey("ApprovalProgressId");

                    b.HasOne("DocumentManagementSystem.Models.NewDocumentRequest", "DocumentRequest")
                        .WithMany("GrantedApproval")
                        .HasForeignKey("DocumentRequestId");

                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.NewDocumentRequest", b =>
                {
                    b.HasOne("DocumentManagementSystem.Models.ApprovalStatus", "ApprovalStatus")
                        .WithMany("NewDocumentRequest")
                        .HasForeignKey("ApprovalStatusId");

                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser", "CanceledByNavigation")
                        .WithMany()
                        .HasForeignKey("CanceledByNavigationId");

                    b.HasOne("DocumentManagementSystem.Models.DocumentType", "DocumentType")
                        .WithMany("NewDocumentRequest")
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("DocumentManagementSystem.Models.Organization", "Organization")
                        .WithMany("NewDocumentRequest")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser", "RequestByNavigation")
                        .WithMany()
                        .HasForeignKey("RequestByNavigationId");
                });

            modelBuilder.Entity("DocumentManagementSystem.Models.UserProfile", b =>
                {
                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser", "CreatedByNavigation")
                        .WithMany()
                        .HasForeignKey("CreatedByNavigationId");

                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DocumentManagementSystem.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
